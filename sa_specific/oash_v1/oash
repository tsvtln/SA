#!/opt/opsware/bin/python

##
# Program Overview:
#
# This program can be used to instantiate a direct shell connection to an agent
# using only a certificate signed by "opsware".
#
# The implementation is very premative.  For example, the local tty is not put 
# into "raw" mode.  Also, the initial request is hard-coded, whereas a more
# general purpose implementation would allow these to be set on the command 
# line.
#
# In windows, the backspace appears not to work.  I'm guessing some kind of 
# key mapping needs to take place here.
#
# TODO:
#
# [X] Add opswgw option.
#
# [X] Automatically query the agent for platform and version.
#
# [X] Add an option to run a specified command on the target agent.
#     (This would allow for a scp style file transfer.)
#     (-e <cmdline>)
#
# [X] Add an option to evaluate an arbitrary python string.  This will allow 
#     for a consistant cross-platform, and cross-version, injection point for 
#     the execution of remote code.  (-y <python_string>)
#
# [ ] Make username specificaition optional.  Default to "root" for non-win32
#     and "LocalSystem" for win32.
#
# [X] Convert this program to use the asyncore library.
#
# [ ] Add an option to fork into the background. ([-f])
#
# [ ] Add an option to forward communications to a listening socket instead 
#     of stdio, and optionally spawn a telnet client to the speicified 
#     listener port.  ([-l host:port [-t]])
#     (I think this would actually be a mostly useless feature.  Unless we 
#     went to the trouble of creating an entire telnet compatible server.
#     Otherwise, the telnet/nc client would either end up getting the raw 
#     OGSH encoded output, or some arbitrarily filtered fixed window-size
#     type terminal.  So I'm not sure this feature would be all that 
#     usefull.)
#
# [ ] Create an integrate arbitrary TCP socket forwarding and multiplexing.
#     ([-L [lhost:]lport:rhost:rport] [-R [rhost:]rport:lhost:lport])
#
# [X] Remove dependence on "coglib.certmaster".
#
# [X] Add code to handle SAS escape codes:
#     #define ESC_CHAR        ((char) 0xEE)
#     #define WINCH_CHAR      'W'
#     #define STDOUT_CHAR     'O'
#     #define STDERR_CHAR     'E'
#     #define EXIT_CHAR       '?'
#     #define EOF_IN_CHAR     'i'
#     #define EOF_OUT_CHAR    'o'
#     #define EOF_ERR_CHAR    'e'
#     #define PTY_YES_CHAR    't'
#     #define PTY_NO_CHAR     'T'
#
# [X] Add cleaner getopt parameter parsing.
#
# [X] Have various properties of XML RPC request filled in more intellegently.
#     For example, terminal properties, etc.
#
#------------------------------------------------------------------------------

import sys
import time
import select
import tty
import os
import getopt
import string
import socket
import asyncore
import types
import signal
import gzip
import base64
import md5
import re
import fcntl, termios, struct
import imp
import errno

from errno import ECONNRESET

# Global tunnel object.
g_oTunnel = None

if "/opt/opsware/pylibs" not in sys.path: sys.path.append("/opt/opsware/pylibs")
if "/lc/blackshadow" not in sys.path: sys.path.append("/lc/blackshadow")

from M2Crypto import SSL
from M2Crypto import M2Crypto

# Global debug level.
g_nDebug = 0

# Figure out a name.
if ( __name__=='__main__' ):
    g_sName = sys.argv[0]
else:
    g_sName = __name__

# Global OnExit object.  This object should be chained and contain a function 
# named OnExit().  It is to allow various objects to insert code that needs to
# execute when the program exits, no matter what exit conditions are.  For
# example, tty reset code.
g_oOnExit = None

# Global asyncore loop select error callback object. ;)  When a signal is
# handled without exiting the process, any pending select statement will throw
# an exception.  In that case, this object's "OnSelectError()" method will be 
# called.  For example, this allows a window size change signal to be propertly
# handled and serviced.
g_oAsyncCb = None

class Options:
    def PrintUsage( self ):
        _Debug( """Direct shell login to opsware agents via "ogsh.jump" xmlrpc.

Usage: %s [-p <password>] [-c <client_cert_path] [-e <command>] 
       [-g [realm@]gwhost[:gwport]] [-h] [-L [lhost:]lport:[rhost]:rport] [-T] 
       [-y <python_expression>] [-R [rhost:]rport:[lhost]:lport]
       user@agent_host[:agent_port]

Options:
 -c  Supply an optional client certificate.  (Expected to be in PEM format and
     contain both certificate and private key.)
 -d  Enable debug printouts.
 -e  Execute given command remotely.
 -g  Connect through an opswgw proxy port.  Realm is optional.  If no port is
     specified, then defaults to 3001.
 -h  Prints this help text.
 -L  Specifies a local listener on host <lhost> port <lport> to be forwarded 
     through the tunnel connection to remote host <rhost> on port <rport>.  If
     either of <lhost> or <rhost> are not specified, then "localhost" is
     assumed.
 -p  Supply an optional password.  (In the future this will be neccessary when
     authing as a win32 AD account.)
 -R  Specifies a remote listener on host <rhost> port <rport> to be forwarded 
     through the tunnel connection to local host <lhost> on port <lport>.  If
     either of <lhost> or <rhost> are not specified, then "localhost" is
     assumed.
 -T  Suppress pty allocation request.
 -y  Execute given python expression remotely.

Notes:
    o If [:agent_port] is not specified, '1002' is assumed.
    o If [:gwport] port is not specified, then '3002' is assumed.

Discussion:
    This utility is still in heavy development.
""" % g_sName )
        sys.exit( 1 )

    def __init__( self, lstArgs ):
        # Initialize input parameters to default values.
        self.sUsername = ""
        self.sCertPath = ""
        self.sCmd = ""
        self.bFork = 0
        self.bUseGW = 0
        self.sGWHost = ""
        self.nGWPort = -1
        self.sGWRealm = ""
        self.sPassword = ""
        self.bNoPty = 0
        self.sPythonExp = ""
        self.sAgentHost = ""
        self.sAgentPort = ""
        self.nAgentPort = -1
        self.lstTcpmuxOpts = []
        self.sArgs = ""

        # Parse arguments.
        (lstOpts, lstArgs) = getopt.getopt(lstArgs, "c:de:fg:hL:p:R:Ty:")
        if ( len(lstArgs) > 0 ): sArgs = lstArgs[0]
        if ( len(lstArgs) != 1 or len(string.split(sArgs, "@")) !=2 ):
            # Print usage and exit with error.
            self.PrintUsage( )

        global g_nDebug
        # Itterate through all the options.
        for aCurOpt in lstOpts:
            if( aCurOpt[0] == "-c" ):
                self.sCertPath = aCurOpt[1]
            elif( aCurOpt[0] == "-d" ):
                g_nDebug = g_nDebug + 1
            elif( aCurOpt[0] == "-e" ):
                self.sCmd = aCurOpt[1]
            elif( aCurOpt[0] == "-f" ):
                self.bFork = 1
            elif( aCurOpt[0] == "-T" ):
                self.bNoPty = 1
            elif( aCurOpt[0] == "-g" ):
                self.bUseGW = 1
                self.sGWHost = aCurOpt[1]
                sGWPort = "3002"
                if ( string.find( self.sGWHost, "@" ) > -1 ): ( self.sGWRealm, self.sGWHost ) = string.split( self.sGWHost, "@" )
                if ( string.find( self.sGWHost, ":" ) > -1 ): ( self.sGWHost, sGWPort ) = string.split( self.sGWHost, ":" )
                if ( sGWPort ): self.nGWPort = int( sGWPort )
            elif( aCurOpt[0] == "-p" ):
                self.sPassword = aCurOpt[1]
            elif( aCurOpt[0] == "-R" ):
               self.lstTcpmuxOpts = self.lstTcpmuxOpts + [aCurOpt[0], aCurOpt[1]] 
            elif( aCurOpt[0] == "-y" ):
                self.sPythonExp = aCurOpt[1]
            elif( aCurOpt[0] == "-h" ):
                # Print usage and exit.
                self.PrintUsage( )
            elif( aCurOpt[0] == "-L" ):
               self.lstTcpmuxOpts = self.lstTcpmuxOpts + [aCurOpt[0], aCurOpt[1]] 

        # Grab the first non-parsed argument as the "target" and parse it.
        sTarg = lstArgs[0]
        (self.sUsername, sTarg) = string.split(sTarg, "@")
        if ( string.find( sTarg, ":" ) > -1 ): (self.sAgentHost, self.sAgentPort) = string.split(sTarg, ":")
        else: (self.sAgentHost, self.sAgentPort) = (sTarg, "1002")
        try:
            self.nAgentPort = int( self.sAgentPort )
        except:
            _Debug( "%s: Agent port, <agent_port> must be an integer.\n\n" % g_sName )
            self.PrintUsage( )

        if ( self.sCertPath == "" ):
            DARWIN_CERT_PATH='/var/lc/crypto/spin/spin.srv'
            EINSTEIN_CERT_PATH='/var/opt/opsware/crypto/spin/spin.srv'

            if ( os.path.exists( EINSTEIN_CERT_PATH ) ): self.sCertPath=EINSTEIN_CERT_PATH
            elif ( os.path.exists( DARWIN_CERT_PATH ) ): self.sCertPath=DARWIN_CERT_PATH
            else:
                _Debug( "%s: Could not find a default cert and no cert specified!\n\n" % g_sName )
                sys.exit(1)
        elif ( not os.path.exists( self.sCertPath ) ):
            _Debug( "%s: %s: Cert does not exist!\n\n" % (g_sName, self.sCertPath) )
            sys.exit(1)


HTTPRespHdrRE = re.compile("^HTTP[^ ]+ (\d+).*\r\n\r\n", re.S)
def ProcessHTTPResp( oSslSock, sHttpReq, anAllowedRespCodes, sBuf="" ):
    # Send the HTTP request:
    oSslSock.send( sHttpReq )

    # Wait for the response.
    while 1:
        aSel = select.select( [oSslSock], [], [], 30 )

        if ( oSslSock in aSel[0] ):
            sBlock = oSslSock.recv(4096)
            if ( g_nDebug > 0 ): _Debug( "HTTP Response block: -%s-\n" % sBlock )
            sBuf = sBuf + sBlock

            match = HTTPRespHdrRE.search( sBuf )

            if ( match ):
                # Return any part of the buffer left over after processing the HTTP headers.
                sBuf = sBuf[match.regs[0][1]:]
                # Grab the HTTP response code.
                nRespCode = int(match.group(1))
                # If the HTTP response code is not one of the allowed.
                if ( not ( nRespCode in anAllowedRespCodes ) ):
                    # Extract the HTTP Headers and print an error message.
                    sHTTPRespHdrs = match.string[:match.regs[0][1]]
                    _Debug( "Recieved error HTTP response code %d\nHeaders recieved:\n%s\n" % (nRespCode, sHTTPRespHdrs) )
                    _Exit( 1 )
                # Indicate that we are done processing HTTP response headers.
                break
        else:
           _Debug( "%s: Tiemout while sending HTTP request!\n" % g_sName )
           _Exit( 1 )

    # Return the results.
    return sBuf


OGSHRespHdrRE = re.compile("^([^\r\n]+)\r?\n")
def ProcessOGSHResp( oSslSock, sBuf, asExpectedResp ):
    bTimedOut = 0
    sRespCode = 0
    while 1:
        aSel = select.select( [oSslSock], [], [], 30 )

        if ( oSslSock in aSel[0] ):
            sCurBuf = oSslSock.recv(4096)
            if ( not sCurBuf ): continue
            if ( g_nDebug > 0 ): _Debug( "OGSH response message: -%s-\n" % sCurBuf )
            sBuf = sBuf + sCurBuf

            match = OGSHRespHdrRE.search( sBuf )

            if ( match ):
                # Return any part of the buffer left over after processing the OGSH response.
                sBuf = sBuf[match.regs[0][1]:]
                # Return OGSH response message.
                sRespMsg = match.group(1)

                # If we recieved the expected response.
                if ( sRespMsg in asExpectedResp ):
                    break
                else:
                    _Debug( "%s: Recieved unexpected OGSH response message -%s-\n" % (g_sName, sRespMsg) )
                    _Debug( "%s: Expecting %s\n" % (g_sName, str(asExpectedResp)) )
                    _Exit( 1 )
        else:
            # Indicate that we timed out.
            _Debug( "%s: Tiemout while waiting for OGSH response!\n" % g_sName )
            _Exit( 1 )

    # Return the results.
    return sBuf


def ConnectViaGW( sock, sGWHost, nGWPort, sGWRealm, sTargetHost, nTargetPort ):
    # Connect to the given gateway proxy port.
    sock.connect((sGWHost, nGWPort))

    # Construct the GW HTTP connect request.
    sGWConnectReq = "CONNECT %s:%d HTTP/1.0\r\n" % ( sTargetHost, nTargetPort )
    if ( sGWRealm ):
        sGWConnectReq = sGWConnectReq + "X-OPSW-REALM: %s\r\n" % sGWRealm
    sGWConnectReq = sGWConnectReq + "\r\n"

    if ( g_nDebug > 0 ): _Debug( "GW Req: -%s-\n" % sGWConnectReq )

    # Process the response.
    sBuf = ProcessHTTPResp( sock, sGWConnectReq, [200] )

    # Return the socket.
    return sock


# Debug method
def hexstr(s):
    lst = []
    for ch in s:
        hv = string.replace(hex(ord(ch)), '0x', '')
        if len(hv) == 1:
            hv = '0'+hv
        lst.append(hv)
    
    return reduce(lambda x,y:x+y, lst)

# Debug method
def DumpObj(o):
    _Debug( "Object: [%s]:\n" % str(o) )
    for sCurAttr in dir(o):
        _Debug( "  %s:[%s]\n" % (sCurAttr, getattr( o, sCurAttr ) ) )

#def toStr(s):
#    return s and chr(atoi(s[:2], base=16)) + toStr(s[2:]) or ''


# Class to decode OGSH escape sequencies.
OGSH_ESC_CHAR = "\356"
OGSH_WINCH_CHAR = "W"
class OGSHDecoder:
    def __init__( self, sBuf="" ):
        self.bStdOut = 1
        self.sBufStdOut = ""
        self.sBufStdErr = ""
        self.sBuf = sBuf

    def Process( self, sBuf ):
        self.sBuf = self.sBuf + sBuf

        while (OGSH_ESC_CHAR in self.sBuf):
           nEscPos = string.find( self.sBuf, OGSH_ESC_CHAR )
           if ( self.bStdOut ):
               self.sBufStdOut = self.sBufStdOut + self.sBuf[:nEscPos]
           else:
               self.sBufStdErr = self.sBufStdErr + self.sBuf[:nEscPos]
           self.sBuf = self.sBuf[nEscPos:]
           if ( len(self.sBuf) > 1 ):
               if ( self.sBuf[1] == "O" ):
                   self.bStdOut = 1
               elif ( self.sBuf[1] == "E" ): 
                   self.bStdOut = 0
               elif ( self.sBuf[1] == OGSH_ESC_CHAR ):
                   if ( self.bStdOut ):
                       self.sBufStdOut = self.sBufStdOut + OGSH_ESC_CHAR
                   else:
                       self.sBufStdErr = self.sBufStdErr + OGSH_ESC_CHAR

               if ( g_nDebug > 0 ): _Debug( "%" + self.sBuf[1] )

               if ( self.sBuf[1] == OGSH_WINCH_CHAR ):
                   if ( len(self.sBuf) > 5 ):
                       self.sBuf = self.sBuf[6:]
                   else:
                       break
               else:
                   self.sBuf = self.sBuf[2:]

        if ( string.find( self.sBuf, OGSH_ESC_CHAR ) < 0 ):
            if ( self.bStdOut ):
                self.sBufStdOut = self.sBufStdOut + self.sBuf
            else:
                self.sBufStdErr = self.sBufStdErr + self.sBuf

            self.sBuf = ""

    def GetStdOut( self ):
        sBuf = self.sBufStdOut
        self.sBufStdOut = ""
        return sBuf

    def GetStdErr( self ):
        sBuf = self.sBufStdErr
        self.sBufStdErr = ""
        return sBuf


class OgshSocket( OGSHDecoder ):
    def __init__( self, oSocket, sBuf ):
        OGSHDecoder.__init__( self, sBuf )
        self.oSocket = oSocket

    def fileno( self ):
        return self.oSocket.fileno( )

    def recv( self, nBuf ):
        sData = self.oSocket.recv( nBuf )
        self.Process( sData )
        sErrBuf = self.GetStdErr( )
        if ( sErrBuf and g_nDebug > 0 ): _Debug( sErrBuf )
        sStdOut = self.GetStdOut( )
        return sStdOut

    def send( self, sBuf ):
        return self.oSocket.send( sBuf )

    def setblocking( self, *aArgs ):
        apply( self.oSocket.setblocking, aArgs )

    def close( self ):
        return self.oSocket.close( )


##
# Obtains an ssl socket to the given agent, optionally through an opswgw proxy 
# port.
def GetAgentSslSock( oOpts ):
    ctx = SSL.Context( "sslv23" )
    ctx.load_cert( oOpts.sCertPath )
    ctx.set_cipher_list( 'RC4-MD5:RC4-SHA:DES-CBC3-SHA:DES-CBC3-MD5' )

    ssl_sock = SSL.Connection( ctx )

    if ( oOpts.bUseGW ):
        ConnectViaGW( ssl_sock.socket, oOpts.sGWHost, oOpts.nGWPort, oOpts.sGWRealm, oOpts.sAgentHost, oOpts.nAgentPort )
        ssl_sock._setup_ssl((oOpts.sGWHost, oOpts.nGWPort))
        ssl_sock._check_ssl_return(M2Crypto.ssl_connect(ssl_sock.ssl))
    else:
        ssl_sock.connect((oOpts.sAgentHost,oOpts.nAgentPort))

    return ssl_sock


XMLRPCReturnValueRE = re.compile(".*methodResponse.+params.+param.+value.+string>([^<>]+)<", re.S)
sHttpGetOsType = "GET /rpc.py?method=platform.getOsType HTTP/1.0\r\n\r\n"
g_sAgentOsType = ""
def GetAgentOsType( oOpts ):
    # If we already know the agent os type.
    global g_sAgentOsType
    if ( g_sAgentOsType ): return g_sAgentOsType

    # Open a ssl socket to the agent.
    oSslSock = GetAgentSslSock( oOpts )

    # Execute the platform.getOsType XMLRPC call and Wait for the HTTP response.
    sBuf = ProcessHTTPResp( oSslSock, sHttpGetOsType, [200] )

    # Read in the HTTP response body.
    sResp = sBuf
    try:
        sBuf = oSslSock.recv( 4096 )
        while ( len(sBuf) > 0 ):
            sResp = sResp + sBuf
    except:
        pass

    # Close the ssl socket.
    oSslSock.close()

    # Grep the response for the platform identifier
    oMatch = XMLRPCReturnValueRE.search(sResp)
    g_sAgentOsType = sOsType = sResp[oMatch.regs[1][0]:oMatch.regs[1][1]]

    if ( g_nDebug > 0 ): _Debug( "%s: Detected OS type: '%s'\n" % ( g_sName, g_sAgentOsType ) )

    # Return the OS type.
    return g_sAgentOsType
    

sHttpGetVersion = "GET /rpc.py?method=cogbot.getVersion HTTP/1.0\r\n\r\n"
g_sAgentVersion = ""
def GetAgentVersion( oOpts ):
    # If we already know the agent version.
    global g_sAgentVersion
    if ( g_sAgentVersion ): return g_sAgentVersion

    # Open a ssl socket to the agent.
    oSslSock = GetAgentSslSock( oOpts )

    # Execute the cogbot.getVersion XMLRPC call and wait for the HTTP response.
    sBuf = ProcessHTTPResp( oSslSock, sHttpGetVersion, [200] )

    # Read in the HTTP response body.
    sResp = sBuf
    try:
        sBuf = oSslSock.recv( 4096 )
        while ( len(sBuf) > 0 ):
            sResp = sResp + sBuf
    except:
        pass

    # Close the ssl socket.
    oSslSock.close()

    # Grep the response for the cogbot version
    oMatch = XMLRPCReturnValueRE.search(sResp)
    g_sAgentVersion=sResp[oMatch.regs[1][0]:oMatch.regs[1][1]]

    if ( g_nDebug > 0 ): _Debug( "%s: Detected agent version: '%s'\n" % ( g_sName, g_sAgentVersion ) )

    # return the results.
    return g_sAgentVersion
    

def compact_traceback():
    t, v, tb = sys.exc_info()
    tbinfo = []
    assert tb # Must have a traceback
    while tb:
        tbinfo.append((
            tb.tb_frame.f_code.co_filename,
            tb.tb_frame.f_code.co_name,
            str(tb.tb_lineno)
            ))
        tb = tb.tb_next

    # just to be safe
    del tb

    file, function, line = tbinfo[-1]
#    info = string.join(['[%s|%s|%s]' % x for x in tbinfo])
    info = '[' + string.join (
        map (
            lambda x: string.join (x, '|'),
            tbinfo
            ),
        '] ['
        ) + ']'
    return (file, function, line), t, v, info


class MyDispatcher( asyncore.dispatcher ):
    def __init__( *args ):
        apply (asyncore.dispatcher.__init__, args)

    def log( self, sMesg ):
        if ( g_nDebug > 0 ): _Debug( "%s: asyncore: %s\n" % ( g_sName, sMesg ) )

    def handle_error(self):
        nil, t, v, tbinfo = compact_traceback()

        # sometimes a user repr method will crash.
        try:
            self_repr = repr(self)
        except:
            self_repr = '<__repr__(self) failed for object at %0x>' % id(self)

        sys.stderr.write( 'uncaptured python exception, closing channel %s (%s:%s %s)' % (self_repr, t, v, tbinfo) )
        self.close()

    def handle_error_old (self, *info):
        (t,v,tb) = info
        if ( g_nDebug > 0 ):
            (file,fun,line), tbinfo = asyncore.compact_traceback (t,v,tb)

            # sometimes a user repr method will crash.
            try:
                self_repr = repr (self)
            except:
                self_repr = '<__repr__ (self) failed for object at %0x>' % id(self)

            _Debug (
                '%s: uncaptured python exception, closing channel %s (%s:%s %s)\n' % (
                    g_sName,
                    self_repr,
                    str(t),
                    str(v),
                    tbinfo
                    )
                )
        del t,v,tb
        self.close()


class MyFileDispatcher( asyncore.file_dispatcher ):
    def __init__( self, nFD ):
        asyncore.file_dispatcher.__init__( self, nFD )

        # If this FD is stdin, stdout, or stderr, then hijack file_wrapper's close.
        if ( nFD in [0, 1, 2]):
            self.socket.close = lambda : 0

        # Hack to make file_wrapper class work right.
        self.socket.send = self.socket.write

    def log( self, sMesg ):
        if ( g_nDebug > 0 ): _Debug( "%s: asyncore: %s\n" % ( g_sName, sMesg ) )

    def handle_error(self):
        nil, t, v, tbinfo = compact_traceback()

        # sometimes a user repr method will crash.
        try:
            self_repr = repr(self)
        except:
            self_repr = '<__repr__(self) failed for object at %0x>' % id(self)

        sys.stderr.write( 'uncaptured python exception, closing channel %s (%s:%s %s)' % (self_repr, t, v, tbinfo) )
        self.close()

    def handle_error_old (self, *info):
        (t,v,tb) = info
        (file,fun,line), tbinfo = compact_traceback (t,v,tb)

        # sometimes a user repr method will crash.
        try:
            self_repr = repr (self)
        except:
            self_repr = '<__repr__ (self) failed for object at %0x>' % id(self)

        if ( g_nDebug > 0 ): _Debug (
            '%s: uncaptured python exception, closing channel %s (%s:%s %s)' % (
                g_sName,
                self_repr,
                str(t),
                str(v),
                tbinfo
                )
            )
        del t,v,tb
        self.close()

def OgshJump( oOpts, oStdIoeConn ):
    # HTTP/XMLRPC related string constants for ogsh.jump method.
    sPostBody = "<?xml version='1.0'?>\n<methodCall>\n<methodName>ogsh.jump</methodName>\n<params>\n<param>\n<value><struct>\n<member>\n<name>term_rows</name>\n<value><int>%d</int></value>\n</member>\n<member>\n<name>cwd</name>\n<value><string></string></value>\n</member>\n<member>\n<name>term_type</name>\n<value><string>%s</string></value>\n</member>\n<member>\n<name>password</name>\n<value><string>%s</string></value>\n</member>\n<member>\n<name>run_as_superuser</name>\n<value><int>0</int></value>\n</member>\n<member>\n<name>pty</name>\n<value><int>%d</int></value>\n</member>\n<member>\n<name>term_cols</name>\n<value><int>%d</int></value>\n</member>\n<member>\n<name>term_ios</name>\n<value><string>38400:38400:3.1C.8.15.4.0.0.11.13.1A.100.12.17.16.100.100.100.F:B40:1E3B:544505:8</string></value>\n</member>\n<member>\n<name>username</name>\n<value><string>%s</string></value>\n</member>\n</struct></value>\n</param>\n</params>\n</methodCall>\n" % (oStdIoeConn.aWinSize[0], os.environ['TERM'], oOpts.sPassword, not oOpts.bNoPty, oStdIoeConn.aWinSize[1], oOpts.sUsername)
    sHttpPostReq = 'POST /ops/shell/shell_init.py HTTP/1.0\r\nHOST: %s:%s\r\nUpgrade: OGSH/1.0\r\nUser-Agent: xmlrpclib.py/0.9.8 (Using SSL by Loudcloud)\r\nContent-Type: text/xml\r\nContent-Length: %d\r\n\r\n' % (oOpts.sAgentHost, oOpts.sAgentPort, len(sPostBody)) + sPostBody

    # Open a ssl socket to the agent.
    oSslSock = GetAgentSslSock( oOpts )

    # Execute the ogsh.jump XMLRPC call and wait for the HTTP response.
    sBuf = ProcessHTTPResp( oSslSock, sHttpPostReq, [101] )

    # Wait for the OGSH "OK" response.
    sBuf = ProcessOGSHResp( oSslSock, sBuf, ["OK"] )

    if ( g_nDebug > 0 ): _Debug( "%s: Connected to %s as %s\n" % (g_sName, oOpts.sAgentHost, oOpts.sUsername) )

    # Return the socket and any left over buffer:
    return (oSslSock, sBuf)


class OgshSocketDisp( MyDispatcher ):
    def __init__( self, oSslSock, sBuf, oStdIoeConn ):
        # Call the parent's initializer.
        MyDispatcher.__init__( self, oSslSock )

        # Initialze some member variables.
        self.oStdIoeConn = oStdIoeConn
        self.sRawReadBuf = sBuf
        self.ogsh_decoder = OGSHDecoder( )

    def handle_connect(self):
        pass

    def handle_read(self):
        try:
            sRead = self.recv(4096)
            if ( type(sRead) == types.StringType ): 
                self.sRawReadBuf = self.sRawReadBuf + sRead
                self.ogsh_decoder.Process( self.sRawReadBuf )
                self.sRawReadBuf = ""
                self.oStdIoeConn.WriteStdOut( self.ogsh_decoder.GetStdOut() )
                self.oStdIoeConn.WriteStdErr( self.ogsh_decoder.GetStdErr( ) )
            else:
                if ( g_nDebug > 0 ): _Debug( "Warning: non string type read from agent socket: -%s-, %s\n" % (sRead, type(sRead)))
        except:
            self.handle_close()

    def writable(self):
        return (self.oStdIoeConn.HasStdIn( ))

    def handle_write(self):
        sent = self.send(self.oStdIoeConn.ReadStdIn( ))

    def handle_close(self):
        _Debug( "Connection to %s closed.\r\n" % self.socket.addr[0] )
        self.close()
        self.oStdIoeConn.Close()


def OgshPush( oOpts, oStdIoeConn, sCmd ):
    # Figure out the script content
    if ( GetAgentOsType( oOpts ) == "win32" ):
        sScriptCode = "%s" % sCmd
    else:
        sScriptCode = "#!/bin/sh\n%s" % sCmd

    # Calculate the script hash.
    sScriptHash = base64.encodestring(md5.md5(sScriptCode).digest())[:-1]

    # If a stdioe object was supplied.
    if ( oStdIoeConn ):
        nRows = oStdIoeConn.aWinSize[0]
        nCols = oStdIoeConn.aWinSize[1]
        bNoPty = oOpts.bNoPty
    else:
        nRows = 25
        nCols = 80
        bNoPty = 1

    # HTTP/XMLRPC related string constants for ogsh.jump method.
    sPostBody = "<?xml version='1.0'?>\n<methodCall>\n<methodName>ogsh.push</methodName>\n<params>\n<param>\n<value><struct>\n<member>\n<name>cwd</name>\n<value><string></string></value>\n</member>\n<member>\n<name>term_type</name>\n<value><string>%s</string></value>\n</member>\n<member>\n<name>password</name>\n<value><string>%s</string></value>\n</member>\n<member>\n<name>exempt_script</name>\n<value><int>1</int></value>\n</member>\n<member>\n<name>run_as_superuser</name>\n<value><int>0</int></value>\n</member>\n<member>\n<name>pty</name>\n<value><int>%d</int></value>\n</member>\n<member>\n<name>term_cols</name>\n<value><int>%d</int></value>\n</member>\n<member>\n<name>term_ios</name>\n<value><string>38400:38400:3.1C.7F.15.4.0.0.11.13.1A.100.12.17.16.100.100.100.F:140:E3B:544505:8</string></value>\n</member>\n<member>\n<name>term_rows</name>\n<value><int>%d</int></value>\n</member>\n<member>\n<name>script_name</name>\n<value><string>ogsh_script.bat</string></value>\n</member>\n<member>\n<name>script_hash</name>\n<value><string>%s\n</string></value>\n</member>\n<member>\n<name>script_version</name>\n<value><string>32.0.1</string></value>\n</member>\n<member>\n<name>username</name>\n<value><string>%s</string></value>\n</member>\n</struct></value>\n</param>\n</params>\n\n</methodCall>\n" % (os.environ['TERM'], oOpts.sPassword, not bNoPty, nCols, nRows, sScriptHash, oOpts.sUsername)
    sHttpPostReq = "POST /ops/shell/shell_init.py HTTP/1.0\r\nHOST: %s:%s\r\nUpgrade: OGSH/1.0\r\nUser-Agent: xmlrpclib.py/0.9.8 (Using SSL by Loudcloud)\r\nContent-Type: text/xml\r\nContent-Length: %d\r\n\r\n" % (oOpts.sAgentHost, oOpts.sAgentPort, len(sPostBody)) + sPostBody

    # Open a ssl socket to the agent.
    oSslSock = GetAgentSslSock( oOpts )

    # Execute the ogsh.jump XMLRPC call and wait for the HTTP response.
    sBuf = ProcessHTTPResp( oSslSock, sHttpPostReq, [101] )

    # Wait for the OGSH "CODE" response.
    sBuf = ProcessOGSHResp( oSslSock, sBuf, ["CODE"] )

    # Send the length of the script code.
    oSslSock.send( "%d\r\n" % len(sScriptCode) )

    # Send the code itself.
    oSslSock.send( sScriptCode )

    # Send an empty line.
    oSslSock.send( "\r\n" )

    # Wait for the OGSH "ARGS" or "UARGS" response.
    sBuf = ProcessOGSHResp( oSslSock, sBuf, ["UARGS","ARGS"] )

    # Send empty args.
    oSslSock.send( "0\r\n" )

    # Wait for the OGSH "OK" response.
    sBuf = ProcessOGSHResp( oSslSock, sBuf, ["OK"] )

    if ( g_nDebug > 0 ): _Debug( "%s: Connected to %s as %s\n" % (g_sName, oOpts.sAgentHost, oOpts.sUsername) )

    # Return the socket and any left over buffer:
    return (oSslSock, sBuf)


def OgshExecPythonExp( oOpts, oStdIoeConn, sPythonExp ):
    if ( GetAgentOsType( oOpts ) == "win32" ):
        if ( GetAgentVersion( oOpts ) >= "32" ):
            sCmd = '"%%%%PROGRAMFILES%%%%\\Opsware\\agent\\lcpython15\\python.exe" -c "%s"'
        else:
            sCmd = '"%%%%PROGRAMFILES%%%%\\LoudCloud\\lcpython15\\python.exe" -c "%s"'
    else:
        if ( GetAgentVersion( oOpts ) >= "32" ):
            sCmd = '/opt/opsware/bin/python -c "%s"'
        else:
            sCmd = '/lc/bin/python -c "%s"'

    # Add in the framework loader.
    sCmd = sCmd % "import base64;eval(compile(base64.decodestring('%s'), 'bs1', 'exec'))"

    return OgshPush( oOpts, oStdIoeConn, sCmd % string.replace(base64.encodestring(sPythonExp),"\n","") )


# Opens a ogsh.push channel with agent and marshes the python module 
# <sPythonMod> to the remote python interpreter.  <sPythonMod> is expected to
# to be a base64 gzip compressed string.
def OgshExecPythonMod( oOpts, sPythonModName, sPythonEval, oStdIoeConn, sPythonMod ):
    # Remote python module boot loader code.
    sPythonExp = 'import base64; import gzip; eval(compile(gzip.zlib.decompress(base64.decodestring("eNptT0GKAjEQvOcVQ04JjkFB9iDmtLsnDz5glaCTxm1IOkM6Mq6vd+LgguCturqrugpjn3JpMPYCJ8h//ITpH52ODB+r53S+YS8SmyFjAbVs5efu63tPUguyo9xw8Ugmw9EHJFCVpp91AFKk58uDgPdXwSIV9W6lBVspxfCLAVT1Yb0Jes2WZ2OMeqcWbZhPG/0Sbbd9BIt2zG4IBheTv4wupAVcoWu6FPvqWjuZW8CT8VC5DMxqqv1gPHDJSOf6oKVWVrHUDVITjXMeu+Lc5Aiv5B2WNnfD")),"bs2","exec"));'

    # Open up a python expression connection to the agent.
    (oSocket, sBuf) = OgshExecPythonExp( oOpts, oStdIoeConn, sPythonExp )
 
    # Wrap this socket and buffer inside of an OGSH decoder wrapper.
    oOgshSock = OgshSocket( oSocket, sBuf )

    # Wait for the "CODE" response.
    sBuf = ProcessOGSHResp( oOgshSock, sBuf, ["CODE"] )

    # Send the name of the python module, and eval statement, and the length 
    # of the compressed module.
    oOgshSock.send( "%s\n%s\n%s\n" % (sPythonModName, sPythonEval, len(sPythonMod) ) )

    # Send the python module.
    while ( len( sPythonMod ) > 0 ):
        sPythonMod = sPythonMod[oOgshSock.send( sPythonMod[:4096]):]

    # Wait for the "OK" response.
    sBuf = ProcessOGSHResp( oOgshSock, sBuf, ["OK"] )

    # Return the socket and buffer.
    return oOgshSock


class StdIoeConn:
    def __init__( self, nStdIn, nStdOut, nStdErr, oOpts ):
        self.oStdInDisp = StdInDisp( nStdIn, self )
        self.oStdOutDisp = StdOutDisp( nStdOut, self )
        self.oStdErrDisp = StdErrDisp( nStdErr, self )
        self.bWinSizeCh = 0
        self.sOldTty = ""

        # If a pty was requested.
        if ( not oOpts.bNoPty ):
            # Set the local pty to raw.
            self.TtySetRaw( oOpts )

            # Install this object into the global OnExit handler.
            # (TODO: make this a hook.)
            g_oOnExit = self

            # Install a handler for the terminal window size change signal.
            StdIoeConn.oSigWinChHandler = self
            def sigwinch_handler( n, frame ):
                StdIoeConn.oSigWinChHandler.bWinSizeCh = 1
            signal.signal( signal.SIGWINCH, sigwinch_handler )

            # Install an OnSelectError handler to check for window size changes.
            # (We don't want to do this in the middle of the actual SIGNWINCH
            # handler for concurency reasons.)
            global g_oAsyncCb
            g_oAsyncCb = self

        # Detect the current width and height of the terminal.
        self.aWinSize = self.GetPtyWinSize( )

    def HasStdIn( self ):
        return ( len(self.oStdInDisp.sReadBuf) > 0 )

    def ReadStdIn( self ):
        sData = self.oStdInDisp.sReadBuf
        self.oStdInDisp.sReadBuf = ""
        return sData

    def WriteStdOut( self, sData ):
        self.oStdOutDisp.WriteBuffered( sData )

    def WriteStdErr( self, sData ):
        self.oStdErrDisp.WriteBuffered( sData )

    # hack for python 1.5.x version of termios that seems to lack TIOCGWINSZ.
    if ( not hasattr(termios,"TIOCGWINSZ") ):
        if ( string.find( sys.platform, "linux" ) > -1 ): termios.TIOCGWINSZ=21523
        elif ( string.find( sys.platform, "freebsd" ) > -1 ): termios.TIOCGWINSZ=1074295912

    def ioctl_GWINSZ( self, fd ):
        try:
            cr = struct.unpack('hh', fcntl.ioctl(fd, termios.TIOCGWINSZ, 'abcd'))
        except:
            return None
        return cr

    def GetPtyWinSize( self ):
        cr = self.ioctl_GWINSZ(0) or self.ioctl_GWINSZ(1) or self.ioctl_GWINSZ(2)

        if not cr:
            try:
                fd = os.open(os.ctermid(), os.O_RDONLY)
                cr = ioctl_GWINSZ(fd)
                os.close(fd)
            except:
                pass
            if not cr:
                try:
                    cr = (env['LINES'], env['COLUMNS'])
                except:
                    cr = (25, 80)
        return cr

    # OnSlectError handler.
    def OnSelectError( self ):
        # If a window size change was detected.
        if ( self.bWinSizeCh ):
            # Indicate we have handled the window size change event.
            self.bWinSizeChSig = 0

            # Get the current window size.
            self.aWinSize = self.GetPtyWinSize( )

            # Construct an OGSH message to communicate this change to the agent.
            sWinChMsg = OGSH_ESC_CHAR + OGSH_WINCH_CHAR + struct.pack( ">HH", self.aWinSize[0], self.aWinSize[1] )

            # Optional debug statement explaining what is going on.
            if ( g_nDebug > 1 ): _Debug( "%s: Window change detected to %s.  Sent OGSH msg: %d[%s]\n" % ( g_sName, self.aWinSize, len(sWinChMsg), hexstr(sWinChMsg) ) )

            # Push this message into the stdin dispatcher's read buffer.
            self.oStdInDisp.sReadBuf = self.oStdInDisp.sReadBuf + sWinChMsg

    # OnExit handler.
    def OnExit( self ):
        # Restore the tty.
        self.TtyRestore( )

        # If there is a global tunnel object.
        global g_oTunnel
        if ( g_oTunnel ):
            # Tell the tunnel to shut down when all flows expire.
            # If there are currently any flows open...
            if ( g_oTunnel.CloseWhenNoFlows( ) ):
                _Debug( "Waiting for existing flows to expire.\n" )

    def Close( self ):
        # Close the std in, out, and error dispatchers.
        self.oStdInDisp.close()
        self.oStdOutDisp.close()
        self.oStdErrDisp.close()

        # Invoke our OnExit handler.
        self.OnExit( )

    # Set the local tty to raw and preserve current settings.
    def TtySetRaw( self, oOpts ):
        # Setup local tty.
        self.sOldTty = tty.tcgetattr(0)
        new = tty.tcgetattr(0)
        if ( GetAgentOsType( oOpts ) == 'win32' ): 
            new[0] = tty.ICRNL | tty.IXON
            new[1] = tty.OPOST | tty.ONLCR | tty.NL0 | tty.CR0 | tty.TAB0 | tty.BS0 | tty.VT0 | tty.FF0
            new[2] = tty.CS8 | tty.CREAD
            new[3] = tty.ISIG | tty.ICANON | tty.IEXTEN | tty.ECHO | tty.ECHOE | tty.ECHOK | tty.ECHOCTL | tty.ECHOKE
        else:
            new[0] = tty.IGNPAR
            new[1] = 0
            new[2] = (new[2] & ~(tty.CSIZE | tty.PARENB)) | tty.CS8
            new[3] = 0
            new[6][tty.VMIN] = 1
            new[6][tty.VTIME] = 0
        tty.tcsetattr(0, tty.TCSADRAIN, new)

    def TtyRestore( self ):
        # If there is an old tty setting.
        if ( self.sOldTty ):
            # Restore previous tty settings, if there are any.
            tty.tcsetattr( 0, tty.TCSAFLUSH, self.sOldTty )


class StdInDisp( MyFileDispatcher ):
    def __init__( self, nFD, oStdIoeConn ):
        MyFileDispatcher.__init__( self, nFD )
        self.oStdIoeConn = oStdIoeConn
        self.sReadBuf = ""

    def handle_connect(self):
        pass

    def handle_read(self):
        read = self.recv(4096)
        self.sReadBuf = self.sReadBuf + read

    def writable(self):
        return 0

    def handle_write(self):
        pass

    def handle_close(self):
        self.close()
        self.oStdIoeConn.Close( )


class StdOutDisp( MyFileDispatcher ):
    def __init__( self, nFD, oStdIoeConn ):
        MyFileDispatcher.__init__( self, nFD )
        self.oStdIoeConn = oStdIoeConn
        self.sWriteBuf = ""

    def handle_connect(self):
        pass

    def handle_read(self):
        pass

    def writable(self):
        return (len(self.sWriteBuf) > 0)

    def handle_write(self):
        nSent = self.send( self.sWriteBuf )
        self.sWriteBuf = self.sWriteBuf[nSent:]

    def handle_close(self):
        self.close( )
        self.oStdIoeConn.Close( )

    def WriteBuffered( self, sData ):
        self.sWriteBuf = self.sWriteBuf + sData


class StdErrDisp( MyFileDispatcher ):
    def __init__( self, nFD, oStdIoeConn ):
        MyFileDispatcher.__init__( self, nFD )
        self.oStdIoeConn = oStdIoeConn
        self.sWriteBuf = ""

    def handle_connect(self):
        pass

    def handle_read(self):
        pass

    def writable(self):
        return (len(self.sWriteBuf) > 0)

    def handle_write(self):
        nSent = self.send( self.sWriteBuf )
        self.sWriteBuf = self.sWriteBuf[nSent:]

    def handle_close(self):
        self.close( )
        self.oStdIoeConn.Close( )

    def WriteBuffered( self, sData ):
        self.sWriteBuf = self.sWriteBuf + sData


# Install a default SIGINT handler.
def sigint_handler( n, frame ):
    # Close all open file descriptors in the asyncore map.
    for oCurKey in asyncore.socket_map.keys( ):
        if ( type(oCurKey) == types.IntType ):
            nFD = oCurKey
            os.close( oCurKey )
        else:
            nFD = oCurKey.fileno( )
        try:
            os.close( nFD )
        except IOError, sWhy:
            if ( g_nDebug > 1 ): _Debug("%s: %s: IOError while closing fd: %s\n" % (g_sName, str(nFD), sWhy))
            pass
        except OSError, sWhy:
            if ( g_nDebug > 1 ): _Debug("%s: %s: OSError while closing fd: %s\n" % (g_sName, str(nFD), sWhy))
            pass
    _Debug( "Killed by signal %d.\n" % signal.SIGINT )
    _Exit( 1 )
signal.signal( signal.SIGINT, sigint_handler )

def siginfo_handler( n, frame ):
    _Debug( "DEBUG: [%s]\n" % asyncore.socket_map )
signal.signal( signal.SIGTSTP, siginfo_handler )

def Main( lstArgs ):
    # Parse the options.
    oOpts = Options( lstArgs[1:] )

    # If any port forwarding options where given.
    if ( oOpts.lstTcpmuxOpts ):
        # If the platform is not windows.
        if ( GetAgentOsType( oOpts ) != "win32" ):
            # Execute tcpmux on the remote end.
            oOgshSock = OgshExecPythonMod( oOpts, "tcpmuxr", "Main( ['tcpmuxr', '-s'%s] )" % (", '-d'" * g_nDebug), None, g_sTcpmuxGzB64 )

            # Create a module space for the local execution of the tcpmux blob.
            global tcpmuxl
            tcpmuxl = imp.new_module( "tcpmuxl" )

            # Load the tcpmux blob into the locally create module.
            exec compile( gzip.zlib.decompress( base64.decodestring( g_sTcpmuxGzB64 ) ), "tcpmuxl", "exec" ) in tcpmuxl.__dict__

            # Execute tcpmux locally in the newly create module.
            tcpmuxl.Main( ["tcpmuxl"] + (['-d'] * g_nDebug) + oOpts.lstTcpmuxOpts + ['-S', oOgshSock] )

            # If a tunnel object was created.
            if ( hasattr( tcpmuxl, "g_oTunnel" ) ):
                global g_oTunnel
                g_oTunnel = tcpmuxl.g_oTunnel
        else:
            # Indicate that port forwarding is disabled against win32 agents.
            _Debug( "%s: Port forwarding is not currently supported against windows agents.\n" % g_sName )

    # If the fork option was not given.
    if ( not oOpts.bFork ):
        # Create a stdioe dispatcher.
        oStdIoeConn = StdIoeConn( sys.stdin.fileno(), sys.stdout.fileno(), sys.stderr.fileno(), oOpts )

        # If a command was specified.
        if ( oOpts.sCmd ):
            (oSocket, sBuf) = OgshPush( oOpts, oStdIoeConn, oOpts.sCmd )
        # Else, if a python expression was specified
        elif ( oOpts.sPythonExp ):
            (oSocket, sBuf) = OgshExecPythonExp( oOpts, oStdIoeConn, oOpts.sPythonExp )
        # Else, just open up a ogsh.jump.
        else:
            (oSocket, sBuf) = OgshJump( oOpts, oStdIoeConn )

        # Create a OGSH socket dispatcher.
        oOgshSockDisp = OgshSocketDisp( oSocket, sBuf, oStdIoeConn )
    else:
        # Just do nothing for now.
        _Debug( "%s: Forking isn't currently implemented, so we will just sit here and do nothing...\n" % g_sName );

def _Debug( sMsg ):
    sys.stderr.write( sMsg + "\r" )

def _Exit( nErr=0 ):
    # If there is an OnExit object, and it has a cleanup method.
    if ( hasattr( g_oOnExit, "OnExit" ) and 
        type(g_oOnExit.OnExit) == types.MethodType ):
        # Call the cleanup method.
        g_oOnExit.OnExit( )

    sys.exit( nErr )

# Embedded tcpmux source code.  Encoded gzipped and base64ed python source code
# tcpmux is a generic tcp forwarding program implemented in python.  The 
# Opsware agent doesn't posses an API to support arbitrary port porwards.  We
# use the following tcpmux code blob by uploading it to a python instance 
# running on the remote agent.  All agents have a python inpreter.  We then
# execute this code blob locally.  In both places the bloc is executed in side
# of its own module space.
#
g_sTcpmuxGzB64 = ''

if __name__=='__main__':
    try:
        Main( sys.argv )

        # Infinate while loop to keep going back into the asyncore loop if
        # certain allowable exceptions occur.
        while 1:
            try:
                # Enter the asyncore loop.
                asyncore.loop()

                # If we get here, then we must be done due to normal user 
                # interaction, so break out of the while loop.
                break
            # If we get a select error..
            except select.error, sWhy:
                # And if the error is due to an interrupted system call...
                if ( string.find(string.lower(str(sWhy)),"interrupted system call") > -1 ):
                    # If there is an async callback object and method.
                    if ( hasattr( g_oAsyncCb, "OnSelectError" ) and
                        type(g_oAsyncCb.OnSelectError) == types.MethodType ):
                        # Invoke the callback method.
                        g_oAsyncCb.OnSelectError( )
                else: raise
    finally:
        _Exit( )
